# 📁 Kainexa AI Agent Platform - Complete Directory Structure

## 🏗️ 전체 프로젝트 구조

```
kainexa-platform/
│
├── 📂 kainexa-core/                    # 백엔드 코어 서비스
│   ├── 📂 src/
│   │   ├── 📂 api/                     # API 레이어
│   │   │   ├── 📄 main.py              # FastAPI 앱 진입점
│   │   │   ├── 📂 routes/
│   │   │   │   ├── 📄 __init__.py
│   │   │   │   ├── 📄 health.py        # 헬스체크 엔드포인트
│   │   │   │   ├── 📄 auth.py          # 인증 관련 API
│   │   │   │   ├── 📄 workflow_routes.py # ✅ Week 3: 워크플로우 REST API
│   │   │   │   ├── 📄 chat.py          # 대화 API
│   │   │   │   └── 📄 execution.py     # 실행 API
│   │   │   ├── 📂 middleware/
│   │   │   │   ├── 📄 __init__.py
│   │   │   │   ├── 📄 auth_middleware.py
│   │   │   │   ├── 📄 cors_middleware.py
│   │   │   │   └── 📄 rate_limit.py
│   │   │   └── 📂 schemas/
│   │   │       ├── 📄 __init__.py
│   │   │       ├── 📄 workflow_schemas.py
│   │   │       ├── 📄 execution_schemas.py
│   │   │       └── 📄 response_schemas.py
│   │   │
│   │   ├── 📂 core/                    # 핵심 설정 및 기능
│   │   │   ├── 📄 __init__.py
│   │   │   ├── 📄 config.py            # 환경 설정
│   │   │   ├── 📄 database.py          # DB 연결
│   │   │   ├── 📄 cache.py             # Redis 캐시
│   │   │   ├── 📄 exceptions.py        # 커스텀 예외
│   │   │   └── 📂 registry/
│   │   │       ├── 📄 __init__.py
│   │   │       └── 📄 workflow_manager.py # ✅ Week 2: 워크플로우 관리자
│   │   │
│   │   ├── 📂 orchestration/           # ✅ Week 4-7: 오케스트레이션 엔진
│   │   │   ├── 📄 __init__.py
│   │   │   ├── 📄 dsl_parser.py        # DSL 파서
│   │   │   ├── 📄 graph_executor.py    # ✅ Week 4: 그래프 실행기
│   │   │   ├── 📄 execution_context.py # ✅ Week 4: 실행 컨텍스트
│   │   │   ├── 📄 step_executors.py    # ✅ Week 5: 노드 실행기
│   │   │   ├── 📄 policy_engine.py     # ✅ Week 6: 정책 엔진 (완성)
│   │   │   ├── 📄 model_router.py      # ✅ Week 7: 모델 라우터 (완성)
│   │   │   └── 📂 workflows/
│   │   │       └── 📄 default.yaml
│   │   │
│   │   ├── 📂 governance/              # ✅ Week 7: RAG 거버넌스
│   │   │   ├── 📄 __init__.py
│   │   │   ├── 📄 rag_pipeline.py      # ✅ Week 7: RAG 파이프라인 (완성)
│   │   │   ├── 📄 document_processor.py # (rag_pipeline에 통합됨)
│   │   │   └── 📄 vector_store.py      # (rag_pipeline에 통합됨)
│   │   │
│   │   ├── 📂 models/                  # AI 모델 관리
│   │   │   ├── 📄 __init__.py
│   │   │   ├── 📄 tensor_parallel.py   # GPU 텐서 병렬
│   │   │   ├── 📄 model_factory.py     # 모델 팩토리
│   │   │   ├── 📄 quantization.py      # 양자화
│   │   │   └── 📄 inference.py         # 추론 엔진
│   │   │
│   │   ├── 📂 monitoring/              # 모니터링
│   │   │   ├── 📄 __init__.py
│   │   │   ├── 📄 metrics_collector.py # 메트릭 수집
│   │   │   ├── 📄 cost_tracker.py      # (policy_engine에 통합됨)
│   │   │   ├── 📄 gpu_monitor.py       # GPU 모니터링
│   │   │   └── 📄 tracer.py           # 추적
│   │   │
│   │   ├── 📂 auth/                    # 인증/권한
│   │   │   ├── 📄 __init__.py
│   │   │   ├── 📄 mcp_permissions.py   # MCP 권한
│   │   │   ├── 📄 jwt_manager.py       # JWT 관리
│   │   │   └── 📄 rbac.py             # RBAC
│   │   │
│   │   ├── 📂 agents/                  # 에이전트
│   │   │   ├── 📄 __init__.py
│   │   │   ├── 📄 base_agent.py
│   │   │   ├── 📄 chat_agent.py
│   │   │   └── 📄 task_agent.py
│   │   │
│   │   ├── 📂 nlp/                     # NLP 처리
│   │   │   ├── 📄 __init__.py
│   │   │   ├── 📄 korean_nlp.py        # 한국어 처리
│   │   │   └── 📄 intent_classifier.py
│   │   │
│   │   └── 📂 utils/                   # 유틸리티
│   │       ├── 📄 __init__.py
│   │       ├── 📄 logger.py
│   │       └── 📄 helpers.py
│   │
│   ├── 📂 database/                    # 데이터베이스
│   │   ├── 📂 schemas/
│   │   │   └── 📄 workflow_schema.sql  # ✅ Week 1: DB 스키마 (완성)
│   │   ├── 📂 migrations/
│   │   │   └── 📄 001_initial.sql
│   │   └── 📂 seeds/
│   │       └── 📄 initial_data.sql
│   │
│   ├── 📂 configs/                     # 설정 파일
│   │   ├── 📂 workflows/
│   │   │   └── 📄 examples.yaml
│   │   ├── 📂 policies/
│   │   │   └── 📄 default_policies.yaml # ✅ Week 6: 정책 설정 (완성)
│   │   └── 📂 models/
│   │       └── 📄 model_configs.yaml
│   │
│   ├── 📂 tests/                       # 테스트
│   │   ├── 📄 __init__.py
│   │   ├── 📄 conftest.py
│   │   ├── 📂 unit/
│   │   │   ├── 📄 __init__.py
│   │   │   ├── 📄 test_workflow_manager.py
│   │   │   ├── 📄 test_graph_executor.py
│   │   │   ├── 📄 test_policy_engine.py  # ✅ Week 6: 정책 테스트 (완성)
│   │   │   ├── 📄 test_model_router.py
│   │   │   └── 📄 test_rag_pipeline.py
│   │   ├── 📂 integration/
│   │   │   └── 📄 test_integration.py
│   │   └── 📂 e2e/
│   │       └── 📄 test_e2e.py
│   │
│   ├── 📂 scripts/                     # 스크립트
│   │   ├── 📄 setup.sh                # 환경 설정
│   │   ├── 📄 run.sh                  # 실행 스크립트
│   │   ├── 📄 gpu_setup.sh           # GPU 설정
│   │   └── 📄 migrate.sh             # DB 마이그레이션
│   │
│   ├── 📂 docker/                     # Docker
│   │   ├── 📄 Dockerfile
│   │   ├── 📄 Dockerfile.gpu
│   │   └── 📂 configs/
│   │       ├── 📄 nginx.conf
│   │       ├── 📄 postgres.sql
│   │       └── 📄 prometheus.yml
│   │
│   ├── 📂 monitoring/                 # 모니터링 설정
│   │   ├── 📂 prometheus/
│   │   │   └── 📄 prometheus.yml
│   │   ├── 📂 grafana/
│   │   │   └── 📂 dashboards/
│   │   │       └── 📄 kainexa.json
│   │   └── 📂 alerts/
│   │       └── 📄 rules.yml
│   │
│   ├── 📂 docs/                       # 문서
│   │   ├── 📂 api/
│   │   │   └── 📄 openapi.yaml       # ✅ Week 1: OpenAPI 스펙 (완성)
│   │   ├── 📂 dsl/
│   │   │   └── 📄 workflow-dsl-v1.0.yaml # ✅ Week 1: DSL 스펙 (완성)
│   │   ├── 📄 README.md
│   │   ├── 📄 ARCHITECTURE.md
│   │   └── 📄 DEPLOYMENT.md
│   │
│   ├── 📄 README.md
│   ├── 📄 Makefile
│   ├── 📄 pyproject.toml
│   ├── 📄 requirements.txt
│   ├── 📄 requirements-gpu.txt
│   ├── 📄 docker-compose.yml
│   ├── 📄 .env.example
│   ├── 📄 .gitignore
│   └── 📄 .dockerignore
│
├── 📂 kainexa-studio/                 # 프론트엔드 Studio
│   ├── 📂 src/
│   │   ├── 📂 components/
│   │   │   ├── 📂 workflow-editor/
│   │   │   │   ├── 📄 WorkflowEditor.tsx
│   │   │   │   ├── 📂 nodes/
│   │   │   │   │   ├── 📄 IntentNode.tsx
│   │   │   │   │   ├── 📄 LLMNode.tsx
│   │   │   │   │   ├── 📄 APINode.tsx
│   │   │   │   │   ├── 📄 ConditionNode.tsx
│   │   │   │   │   └── 📄 LoopNode.tsx
│   │   │   │   ├── 📂 panels/
│   │   │   │   │   ├── 📄 NodePalette.tsx
│   │   │   │   │   ├── 📄 Properties.tsx
│   │   │   │   │   ├── 📄 Publish.tsx
│   │   │   │   │   └── 📄 Debug.tsx
│   │   │   │   └── 📂 utils/
│   │   │   │       └── 📂 dsl/
│   │   │   │           ├── 📄 index.ts        # ✅ Week 2: DSL Export/Import (완성)
│   │   │   │           ├── 📄 toYaml.ts
│   │   │   │           ├── 📄 fromYaml.ts
│   │   │   │           └── 📄 validate.ts
│   │   │   └── 📂 common/
│   │   │       ├── 📄 Header.tsx
│   │   │       ├── 📄 Sidebar.tsx
│   │   │       └── 📄 Footer.tsx
│   │   │
│   │   ├── 📂 services/
│   │   │   ├── 📄 coreClient.ts      # Core API 클라이언트
│   │   │   ├── 📄 workflowService.ts
│   │   │   └── 📄 executionService.ts
│   │   │
│   │   ├── 📂 pages/
│   │   │   ├── 📄 index.tsx
│   │   │   ├── 📄 workflows.tsx
│   │   │   ├── 📄 executions.tsx
│   │   │   └── 📄 monitoring.tsx
│   │   │
│   │   ├── 📂 styles/
│   │   │   └── 📄 globals.css
│   │   │
│   │   └── 📄 App.tsx
│   │
│   ├── 📂 public/
│   │   └── 📄 index.html
│   │
│   ├── 📂 packages/                   # 모노레포 패키지
│   │   ├── 📂 workflow-engine/
│   │   │   ├── 📂 src/
│   │   │   │   └── 📂 nodes/
│   │   │   │       └── 📄 base.ts    # ✅ Week 2: 노드 베이스 클래스 (완성)
│   │   │   └── 📄 package.json
│   │   ├── 📂 shared/
│   │   │   └── 📄 package.json
│   │   └── 📂 ui/
│   │       └── 📄 package.json
│   │
│   ├── 📂 apps/
│   │   └── 📂 studio-api/
│   │       └── 📄 tsconfig.json
│   │
│   ├── 📄 package.json
│   ├── 📄 tsconfig.json
│   ├── 📄 vite.config.ts
│   ├── 📄 .eslintrc.js
│   └── 📄 .prettierrc
│
├── 📂 deployment/                     # 배포
│   ├── 📂 kubernetes/
│   │   ├── 📂 helm/
│   │   │   └── 📂 kainexa/
│   │   │       ├── 📄 Chart.yaml
│   │   │       ├── 📄 values.yaml
│   │   │       └── 📂 templates/
│   │   └── 📂 manifests/
│   │       ├── 📄 namespace.yaml
│   │       ├── 📄 deployment.yaml
│   │       └── 📄 service.yaml
│   │
│   ├── 📂 terraform/
│   │   ├── 📄 main.tf
│   │   ├── 📄 variables.tf
│   │   └── 📄 outputs.tf
│   │
│   └── 📂 ansible/
│       ├── 📄 playbook.yml
│       └── 📄 inventory.ini
│
└── 📄 README.md                       # 프로젝트 루트 README
```

## 📊 구현 현황 요약

### ✅ 완료된 주요 컴포넌트 (Week 1-7)

#### **백엔드 (kainexa-core)**
1. **Week 1-3: 기초 인프라**
   - `workflow_schema.sql` - 전체 DB 스키마 ✅
   - `workflow_manager.py` - 워크플로우 관리 시스템 ✅
   - `workflow_routes.py` - RESTful API 엔드포인트 ✅
   - `openapi.yaml` - API 명세 ✅
   - `workflow-dsl-v1.0.yaml` - DSL 스키마 ✅

2. **Week 4-5: 실행 엔진**
   - `execution_context.py` - 실행 컨텍스트 ✅
   - `graph_executor.py` - 그래프 실행기 ✅
   - `step_executors.py` - 노드 실행기 (5종) ✅

3. **Week 6: 정책 엔진**
   - `policy_engine.py` - 완전한 정책 엔진 구현 ✅
   - `default_policies.yaml` - 기본 정책 설정 ✅
   - `test_policy_engine.py` - 정책 엔진 테스트 ✅

4. **Week 7: 모델 라우터 & RAG**
   - `model_router.py` - 지능형 모델 라우팅 ✅
   - `rag_pipeline.py` - 완전한 RAG 파이프라인 ✅

#### **프론트엔드 (kainexa-studio)**
1. **Week 2-3: Studio 기능**
   - DSL Export/Import (`src/utils/dsl/`) ✅
   - 노드 베이스 클래스 (`packages/workflow-engine/`) ✅
   - 워크플로우 에디터 컴포넌트 구조 ✅

### 🚧 진행 예정 컴포넌트 (Week 8+)

#### **Week 8: Observability & Security**
- `metrics_collector.py` - 메트릭 수집
- `tracer.py` - 분산 추적
- `mcp_permissions.py` - MCP 권한 시스템
- `jwt_manager.py` - JWT 인증

#### **Week 9: GPU & 모델 최적화**
- `tensor_parallel.py` - 텐서 병렬 처리
- `quantization.py` - 모델 양자화
- `gpu_monitor.py` - GPU 모니터링

#### **Week 10: 통합 및 배포**
- Docker 컨테이너화
- Kubernetes Helm Chart
- CI/CD 파이프라인
- 통합 테스트

## 🔧 주요 설정 파일

### 환경 설정 (`.env.example`)
```env
# Core API
API_PREFIX=/api/v1
API_PORT=8000

# Database
DATABASE_URL=postgresql://kainexa:password@localhost:5432/kainexa
REDIS_URL=redis://localhost:6379

# Qdrant
QDRANT_HOST=localhost
QDRANT_PORT=6333

# GPU
CUDA_VISIBLE_DEVICES=0,1
TENSOR_PARALLEL_SIZE=2

# Security
JWT_SECRET_KEY=your-secret-key
JWT_ALGORITHM=HS256

# Models
MODEL_PATH=/models
SOLAR_MODEL=upstage/solar-10.7b-instruct
```

### Docker Compose (`docker-compose.yml`)
```yaml
version: '3.8'
services:
  postgres:
    image: postgres:15
  redis:
    image: redis:7
  qdrant:
    image: qdrant/qdrant
  core-api:
    build: ./kainexa-core
  studio:
    build: ./kainexa-studio
```

## 📝 다음 단계 액션 아이템

1. **즉시 실행 가능**
   - 완성된 컴포넌트 통합 테스트
   - Docker 이미지 빌드
   - 로컬 환경 실행

2. **1주 내 완료 가능**
   - Week 8 Observability 구현
   - API 문서 자동화
   - 기본 모니터링 대시보드

3. **2주 내 완료 가능**
   - GPU 최적화 구현
   - 프로덕션 배포 준비
   - 성능 테스트 및 튜닝

## 💡 참고사항

- ✅ 표시: 완전히 구현 완료된 파일
- 📂 디렉토리: 논리적 그룹핑
- 📄 파일: 실제 구현 파일
- 회색 항목: 아직 구현되지 않은 파일 (Week 8+)

이 구조는 실제 프로덕션 배포를 위한 완전한 구조이며, 현재까지 Week 1-7의 핵심 기능이 모두 구현되어 있습니다.